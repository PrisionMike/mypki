------ AB INITIO FOR ANYTHIN -------

cargo new projectname
git init
git add .
git commit -m 'to change branch name'
git branch -m main
git push
git remote add origin https://github.com/PrisionMike/mypki.git
git push -u origin main

--------------xxxxxxx--------------


------ PROJECT NOTES -----------------

1. Generate a key pair using openssl
    a. openssl genrsa -out private.pem 2048

2. Draw the public key from the private one.
    openssl rsa -in private.pem -out public.pem -outform PEM -pubout

3. Encrypting a file:
    openssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out file.ssl

4. openssl rsautl -decrypt -inkey private.pem -in file.ssl decrypted.txt

2. The "key pair" generated above is what is per standards, called
as "private key". It has the public key parts as well as some
preperformed computations to speed up decryption (using something
called a "Chinese Remainder Theorem")

3. The 'keys' are number pairs. Here in too. (n,e) is the public
key; (n,d) is the private key.

4. e is for some reason not randomised. It is often a specific well
known constant (65537) or is often among a few well known constants.

5. So the modus operandi is to command a 'private key' (has pub key
info within it too) then draw out the public key from it and publish it.

Openstack is the open source alternative to proprietary cloud stacks.
You can install it on your system and it will provide you a proper cloud stack
like Azure where you can run lots of services on it.

It runs on a base OS and a virtualization system. KVM is the default virtualization
it supports.

KVM is Linux's virtualization support. It turns the Linux kernel itself
into a hypervisor. It is sort of in the middle of the 2 types of virtualization.
Technically it's II but it works like a I.

Also given the primary use case may be systems like Bitcoin where you don't
have to be responsible to even claim to know the key holder, your focus
should not even be on the 'server' side on things.

FOCUS ON SIGNING. We're trying to build ledgers here. Just focus on signing.
Not even verification.

As per the plan I was supposed to work on file sharing using Rust now,
so that's what I am gonna do.

SFTP and FTPS are secure file transfer methods but I am gonna go with
simple HTTPS to send files around.

Now let's create an effin file named JSI.txt and our immediate target would be to sign it.